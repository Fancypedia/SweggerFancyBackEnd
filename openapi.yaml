openapi: 3.0.3
info:
  title: DOKUMEN API FANCY BACKEND BY RAUL MAHYA - OpenAPI 3.0
  description: >-
    Jelaskan disini apa saja yang perlu dijelaskan
    termasuk informasi yang diperlukan untuk dinilai
    term of service isi dari link repo dari swagger ini
  termsOfService: https://raulmahya123.github.io/sweggergis/
  contact:
    email: raulmahya11@gmail.com
  license:
    name: Fancy Backend
    url: https://pkg.go.dev/github.com/Fancypedia/fancybackenddd
  version: 1.0.11
externalDocs:
  description: Repo GCF
  url: https://pkg.go.dev/github.com/Fancypedia/fancybackenddd
servers:
  - url: https://asia-southeast2-testlogin-366704.cloudfunctions.net
  - url: https://us-central1-testlogin-366704.cloudfunctions.net
  - url: https://asia-southeast2-annular-hexagon-401501.cloudfunctions.net
tags:
  - name: Create GIS
    description: Data Geo Spasial
    externalDocs:
      description: Deskripsi dan Kode Program
      url: https://pkg.go.dev/github.com/Fancypedia/fancybackenddd
  - name: auth
    description: Auth to Access to API
    externalDocs:
      description: Deskripsi dan Kode Program
      url: https://pkg.go.dev/github.com/Fancypedia/fancybackenddd
  - name: user
    description: Get Token and Authorize
paths:
  /gislocation:
    get:
      tags:
        - Data Grafik 
      summary: Get Data Geospasial
      description: List Data Geospasial
      operationId: getGeoJSON
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peta'
        '400':
          description: Invalid status value
  /getAllcommned:
    get:
      tags:
        - Data Grafik
      summary: Get Data Geospasial
      description: List Data Geospasial
      operationId: getGeoJSON
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peta'
        '400':
          description: Invalid status value
  /function-16:
    post:
      tags:
        - auth
      summary: Login get Token
      description: Login and Get User Token
      operationId: authService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '405':
          description: Invalid input
  /postgis:  # Penambahan endpoint Create GIS
    post:
      tags:
        - Create GIS
      summary: Create GIS Data
      description: Add new GIS data
      operationId: createGIS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Peta' # Gunakan skema yang sesuai di sini
      responses:
        '201':
          description: Data successfully created
        '400':
          description: Invalid input or request body
      security:
        - token: []
  /login:
    post:
      tags:
        - user
      summary: Create Product Data
      description: Add new Product data
      operationId: create Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth' # Gunakan skema yang sesuai di sini
      responses:
        '201':
          description: Data successfully created
        '400':
          description: Invalid input or request body
  /createproduct:
    post:
      tags:
        - Product
      summary: Create Product Data
      description: Add new Product data
      operationId: create Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product' # Gunakan skema yang sesuai di sini
      responses:
        '201':
          description: Data successfully created
        '400':
          description: Invalid input or request body
      security:
        - token: []
  /updateproduct:
    patch:
      tags:
        - Product
      summary: Updated Product Data berdasarkan nomor id
      description: Updated Product data
      operationId: Updated Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product' # Gunakan skema yang sesuai di sini
      responses:
        '201':
          description: Data successfully created
        '400':
          description: Invalid input or request body
      security:
        - token: []
  /deleteproductt:
    delete:
      tags:
        - Product
      summary: delete Product Data berdasarkan nomor id
      description: delete Product data
      operationId: delete Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProduct' # Gunakan skema yang sesuai di sini
      responses:
        '201':
          description: Data successfully created
        '400':
          description: Invalid input or request body
      security:
        - token: []
  /getproductid:
    post:
      tags:
        - Product
      summary: delete Product Data berdasarkan nomor id
      description: delete Product data
      operationId: delete Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProduct' # Gunakan skema yang sesuai di sini
      responses:
        '201':
          description: Data successfully created
        '400':
          description: Invalid input or request body            
components:
  schemas:
    Peta:
      type: object
      properties:
        type:
          type: string
        geometry:
          type: object
          properties:
            type: 
              type: string
            coordinates: 
              type: array
        properties:
          type: object
          properties:
            name:
              type: string
    Auth:
      type: object
      properties:
        username:
          type: string
          example: raull
        password:
          type: string
          example: ganteng
    AuthResponse:
      type: object
      properties:
        status:
          type: bool
          example: false
        message:
          type: string
          example: fehguy
        token:
          type: string
          example: fehguy
    CreateComment:
      type: object
      properties:
        id:
          type: int
          example: 123
        Username:
          type: string
          example: udin123
        Comment:
          type: string
          example: kamu knp?
        Answer:
          type: string
          example: aku gpp
        Question:
          type: string
          example: aku laper
        Tanggal:
          type: string
          example: "23-09-32"
    product:
      type: object
      properties:
        Nomorid:
          type: int
          example: 123
        Name:
          type: string
          example: udin123
        Description:
          type: string
          example: kamu knp?
        Price:
          type: int
          example: 123
        Size:
          type: string
          example: aku laper
        Stock:
          type: int
          example: 123
        Image:
          type: string
          example: aku laper
        Status:
          type: bool
          example: true
    DeleteProduct:
      type: object
      properties:
        nomorid:
          type: int
          example: 123
  requestBodies:
    AuthReq:
      description: Request Authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Auth'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuthResponse'
  securitySchemes:
    token:
      type: apiKey
      name: token
      in: header
